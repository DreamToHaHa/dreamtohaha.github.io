<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DreamToHaHa</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dreamtohaha.github/"/>
  <updated>2019-11-11T05:20:17.837Z</updated>
  <id>https://dreamtohaha.github/</id>
  
  <author>
    <name>DreamToHaHa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UI 自动化分享</title>
    <link href="https://dreamtohaha.github/2019/11/12/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E5%88%86%E4%BA%AB/"/>
    <id>https://dreamtohaha.github/2019/11/12/UI自动化分享/</id>
    <published>2019-11-12T03:02:21.000Z</published>
    <updated>2019-11-11T05:20:17.837Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇讲解测试自动化的课程，主要使用python 语言及其其中的框架进行实现，主要也是用来测试hexo框架使用的。<a href="http://www.baidu.com/" target="_blank" rel="noopener">参考内容</a> 如果其中有什么问题，可以进行参考这个里面的内容进行实现</p><h2 id="UI-自动化分享"><a href="#UI-自动化分享" class="headerlink" title="UI 自动化分享"></a>UI 自动化分享</h2><h2 id="什么是自动化测试"><a href="#什么是自动化测试" class="headerlink" title="什么是自动化测试"></a>什么是自动化测试</h2><blockquote><p>在软件测试中，自动化测试指的是使用独立于待测软件的其他软件来自动执行测试、比较实际结果与预期并生成测试报告这一过程。在测试流程已经确定后，测试自动化可以自动执行的一些重复但必要测试工作。也可以完成手动测试几乎不可能完成的测试。对于持续交付和持续集成的开发方式而言，测试自动化是至关重要的。</p></blockquote><blockquote><p>随着软件系统规模的日益扩大，以及应用领域的不断拓展，对软件系统的测试也变得更加困难和复杂，传统的人工测试的局限性也越来越明显。自动化软件测试技术可以克服传统测试技术的许多问题。自动化测试所依据的是一套严密的测试法则和评估标准，具有完整的自动测试过程。因此，它可以避免测试人员惯性思维所导致的测试疏漏，也可减少由于手工测试中繁复的重复工作所导致的人为差错。</p></blockquote><h2 id="什么是-UI-自动化测试"><a href="#什么是-UI-自动化测试" class="headerlink" title="什么是 UI 自动化测试"></a>什么是 UI 自动化测试</h2><blockquote><p>基于图形用户交互界面测试（GUI Based Testing）。 基于用户界面（GUI）的测试使用能够产生图形用户界面操作（如出表点击、键盘输入等）的测试框架，模拟用户动作来以观察、验证程序是否正确的响应</p></blockquote><h2 id="UI-自动化优略的不完全举例"><a href="#UI-自动化优略的不完全举例" class="headerlink" title="UI 自动化优略的不完全举例"></a>UI 自动化优略的不完全举例</h2><h3 id="由于它隶属于自动化测试，所以自动化测试的优略它都有"><a href="#由于它隶属于自动化测试，所以自动化测试的优略它都有" class="headerlink" title="由于它隶属于自动化测试，所以自动化测试的优略它都有"></a>由于它隶属于自动化测试，所以自动化测试的优略它都有</h3><ul><li>优势：<ol><li>提高测试执行效率，节约时间成本；</li><li>解放人力去做更重要的工作；</li><li>可重复利用，建设对人的依赖；</li><li>提升客户满意度；</li><li>提升测试团队的整体水平；</li><li>可大幅度减少兼容性测试的工作量；</li><li>有些测试工作必须依靠自动化实现来完成；</li></ol></li><li>劣势：<ol><li>开发测试脚本需要花费较大的时间成本，拉长周期;</li><li>产品的快速迭代，自动化脚本也将不断迭代，时间成本很高;</li><li>不同的项目之间自动化脚本的复用度很低;</li><li>对短期型项目产品实现自动化价值不高;</li><li>自动化无法完全代替手工测试找到bug，实现100%覆盖;</li><li>自动化更多的适用于回归测试;</li><li>自动化开发过程对软件测试团队的技术有更高的要求;</li></ol></li><li>除自动化的优略之外<ol><li>UI 测试是常见的黑盒自动化测试场景，它最接近用户真实场景，也容易发现问题</li><li>UI 相对来说比较容易变化，容易导致测试用例的 fail，维护成本高</li></ol></li></ul><h2 id="技术选型-amp-第三方库选用"><a href="#技术选型-amp-第三方库选用" class="headerlink" title="技术选型 &amp; 第三方库选用"></a>技术选型 &amp; 第三方库选用</h2><p>技术选型：人生苦短，我用 python</p><p>第三方库：pywinauto &amp; pyautogui</p><h2 id="UI-自动化的步骤"><a href="#UI-自动化的步骤" class="headerlink" title="UI 自动化的步骤"></a>UI 自动化的步骤</h2><blockquote><p>⚠️强行总结，大佬轻喷⚠️</p></blockquote><h3 id="找控件"><a href="#找控件" class="headerlink" title="找控件"></a>找控件</h3><p>pywinauto<br>推荐使用 UISpy（贴个图）</p><p>pyautogui<br>图像识别</p><h3 id="模拟鼠标操作"><a href="#模拟鼠标操作" class="headerlink" title="模拟鼠标操作"></a>模拟鼠标操作</h3><p><strong>pywinauto</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pywinauto.mouse.click(button=<span class="string">'left'</span>, coords=(<span class="number">0</span>, <span class="number">0</span>))  <span class="comment">#单击指定的坐标</span></span><br><span class="line">pywinauto.mouse.double_click(button=<span class="string">'left'</span>, coords=(<span class="number">0</span>, <span class="number">0</span>))  <span class="comment">#双击指定的坐标</span></span><br><span class="line"></span><br><span class="line">pywinauto.mouse.move(coords=(<span class="number">0</span>, <span class="number">0</span>))  <span class="comment">#移动鼠标</span></span><br><span class="line"></span><br><span class="line">pywinauto.mouse.press(button=<span class="string">'left'</span>, coords=(<span class="number">0</span>, <span class="number">0</span>))  <span class="comment">#按下鼠标按钮</span></span><br><span class="line">pywinauto.mouse.release(button=<span class="string">'left'</span>, coords=(<span class="number">0</span>, <span class="number">0</span>))  <span class="comment">#释放鼠标按钮</span></span><br><span class="line"></span><br><span class="line">pywinauto.mouse.right_click(coords=(<span class="number">0</span>, <span class="number">0</span>))  <span class="comment">#右键单击指定的坐标</span></span><br><span class="line">pywinauto.mouse.scroll(coords=(<span class="number">0</span>, <span class="number">0</span>), wheel_dist=<span class="number">1</span>)  <span class="comment">#滚动鼠标滚轮</span></span><br><span class="line">pywinauto.mouse.wheel_click(coords=(<span class="number">0</span>, <span class="number">0</span>))  <span class="comment">#鼠标中键单击指定的坐标</span></span><br></pre></td></tr></table></figure><pre><code>直接对控件点击点击坐标</code></pre><p><strong>pyautogui</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pyautogui.onScreen(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#确定 x,y 在屏幕上</span></span><br><span class="line">pyautogui.size()  <span class="comment">#确定屏幕尺寸</span></span><br><span class="line"></span><br><span class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">200</span>)  <span class="comment">#绝对移动</span></span><br><span class="line">pyautogui.moveRel(<span class="number">100</span>, <span class="number">200</span>)  <span class="comment">#相对移动</span></span><br><span class="line">pyautogui.dragTo(<span class="number">100</span>, <span class="number">200</span>, button=<span class="string">'left'</span>)  <span class="comment">#绝对移动</span></span><br><span class="line">pyautogui.dragRel(<span class="number">30</span>, <span class="number">0</span>, <span class="number">2</span>, button=<span class="string">'right'</span>)  <span class="comment">#相对移动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#鼠标点击</span></span><br><span class="line">pyautogui.click(x=<span class="number">100</span>, y=<span class="number">200</span>)</span><br><span class="line">pyautogui.click(clicks=<span class="number">2</span>) </span><br><span class="line">pyautogui.doubleClick(buttton=<span class="string">'right'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#鼠标按下和抬起</span></span><br><span class="line">pyautogui.mouseDown()</span><br><span class="line">pyautogui.mouseUp()</span><br><span class="line"></span><br><span class="line"><span class="comment">#拖拽鼠标</span></span><br><span class="line">pyautogui.scroll(<span class="number">10</span>, x=<span class="number">100</span>, y=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="模拟键盘操作"><a href="#模拟键盘操作" class="headerlink" title="模拟键盘操作"></a>模拟键盘操作</h3><p><strong>pywinauto</strong></p><p>通过调用 send_keys 方法自动键入键或单个键操作（即按住，释放）到活动窗口</p><p>可用的按键代码:</p><pre><code>{SCROLLLOCK}, {VK_SPACE}, {VK_LSHIFT}, {VK_PAUSE}, {VK_MODECHANGE}, {BACK}, {VK_HOME}, {F23}, {F22}, {F21}, {F20}, {VK_HANGEUL}, {VK_KANJI}, {VK_RIGHT}, {BS}, {HOME}, {VK_F4}, {VK_ACCEPT}, {VK_F18}, {VK_SNAPSHOT}, {VK_PA1}, {VK_NONAME}, {VK_LCONTROL}, {ZOOM}, {VK_ATTN}, {VK_F10}, {VK_F22}, {VK_F23}, {VK_F20}, {VK_F21}, {VK_SCROLL}, {TAB}, {VK_F11}, {VK_END}, {LEFT}, {VK_UP}, {NUMLOCK}, {VK_APPS}, {PGUP}, {VK_F8}, {VK_CONTROL}, {VK_LEFT}, {PRTSC}, {VK_NUMPAD4}, {CAPSLOCK}, {VK_CONVERT}, {VK_PROCESSKEY}, {ENTER}, {VK_SEPARATOR}, {VK_RWIN}, {VK_LMENU}, {VK_NEXT}, {F1}, {F2}, {F3}, {F4}, {F5}, {F6}, {F7}, {F8}, {F9}, {VK_ADD}, {VK_RCONTROL}, {VK_RETURN}, {BREAK}, {VK_NUMPAD9}, {VK_NUMPAD8}, {RWIN}, {VK_KANA}, {PGDN}, {VK_NUMPAD3}, {DEL}, {VK_NUMPAD1}, {VK_NUMPAD0}, {VK_NUMPAD7}, {VK_NUMPAD6}, {VK_NUMPAD5}, {DELETE}, {VK_PRIOR}, {VK_SUBTRACT}, {HELP}, {VK_PRINT}, {VK_BACK}, {CAP}, {VK_RBUTTON}, {VK_RSHIFT}, {VK_LWIN}, {DOWN}, {VK_HELP}, {VK_NONCONVERT}, {BACKSPACE}, {VK_SELECT}, {VK_TAB}, {VK_HANJA}, {VK_NUMPAD2}, {INSERT}, {VK_F9}, {VK_DECIMAL}, {VK_FINAL}, {VK_EXSEL}, {RMENU}, {VK_F3}, {VK_F2}, {VK_F1}, {VK_F7}, {VK_F6}, {VK_F5}, {VK_CRSEL}, {VK_SHIFT}, {VK_EREOF}, {VK_CANCEL}, {VK_DELETE}, {VK_HANGUL}, {VK_MBUTTON}, {VK_NUMLOCK}, {VK_CLEAR}, {END}, {VK_MENU}, {SPACE}, {BKSP}, {VK_INSERT}, {F18}, {F19}, {ESC}, {VK_MULTIPLY}, {F12}, {F13}, {F10}, {F11}, {F16}, {F17}, {F14}, {F15}, {F24}, {RIGHT}, {VK_F24}, {VK_CAPITAL}, {VK_LBUTTON}, {VK_OEM_CLEAR}, {VK_ESCAPE}, {UP}, {VK_DIVIDE}, {INS}, {VK_JUNJA}, {VK_F19}, {VK_EXECUTE}, {VK_PLAY}, {VK_RMENU}, {VK_F13}, {VK_F12}, {LWIN}, {VK_DOWN}, {VK_F17}, {VK_F16}, {VK_F15}, {VK_F14} </code></pre><p>修饰符:</p><pre><code>&apos;+&apos;: {VK_SHIFT}&apos;^&apos;: {VK_CONTROL}&apos;%&apos;: {VK_MENU} a.k.a. Alt键</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用修饰符:</span></span><br><span class="line">send_keys(<span class="string">'^a^c'</span>)  <span class="comment">#全选（Ctrl + A）并复制到剪贴板（Ctrl + C）</span></span><br><span class="line">send_keys(<span class="string">'+&#123;INS&#125;'</span>)  <span class="comment">#从剪贴板插入（Shift + Ins）</span></span><br><span class="line">send_keys(<span class="string">'%&#123;F4&#125;'</span>)  <span class="comment">#使用Alt + F4关闭活动窗口 </span></span><br><span class="line">send_keys(&#123;ENTER <span class="number">2</span>&#125;)  <span class="comment">#表示按两次Enter键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如何按住或释放键盘上的按键:</span></span><br><span class="line">send_keys(<span class="string">"&#123;VK_SHIFT down&#125;"</span></span><br><span class="line">          <span class="string">"pywinauto"</span></span><br><span class="line">          <span class="string">"&#123;VK_SHIFT up&#125;"</span>)  <span class="comment">#输入 PYWINAUTO</span></span><br><span class="line"></span><br><span class="line">send_keys(<span class="string">"&#123;h down&#125;"</span></span><br><span class="line">          <span class="string">"&#123;e down&#125;"</span></span><br><span class="line">          <span class="string">"&#123;h up&#125;"</span></span><br><span class="line">          <span class="string">"&#123;e up&#125;"</span></span><br><span class="line">          <span class="string">"llo"</span>)  <span class="comment">#输入 hello </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用花括号来转义修饰符并将保留符号键入为单个键:</span></span><br><span class="line">send_keys(<span class="string">'&#123;^&#125;a&#123;^&#125;c&#123;%&#125;'</span>)  <span class="comment">#键入字符串 "^a^c%" (不会按下Ctrl键)</span></span><br><span class="line">send_keys(<span class="string">'&#123;&#123;&#125;ENTER&#123;&#125;&#125;'</span>)  <span class="comment">#键入字符串“&#123;ENTER&#125;”而不按Enter键</span></span><br></pre></td></tr></table></figure><p><strong>pyautogui</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pyautogui.typewrite(<span class="string">'Hello world!'</span>)  <span class="comment">#输入字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按下键，抬起键和 press（可以传列表）</span></span><br><span class="line">yautogui.keyDown(<span class="string">'shift'</span>)</span><br><span class="line">pyautogui.press(<span class="string">'left'</span>)</span><br><span class="line">pyautogui.press(<span class="string">'left'</span>)</span><br><span class="line">pyautogui.press(<span class="string">'left'</span>) </span><br><span class="line">pyautogui.keyUp(<span class="string">'shift'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#组合热键</span></span><br><span class="line">pyautogui.hotkey(<span class="string">'ctrl'</span>, <span class="string">'shift'</span>, <span class="string">'esc'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一篇讲解测试自动化的课程，主要使用python 语言及其其中的框架进行实现，主要也是用来测试hexo框架使用的。&lt;a href=&quot;http://www.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考内容&lt;/a&gt; 如果其中有什么
      
    
    </summary>
    
    
      <category term="类别" scheme="https://dreamtohaha.github/categories/%E7%B1%BB%E5%88%AB/"/>
    
    
      <category term="标签" scheme="https://dreamtohaha.github/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>hexo 框架中关于 markdown 简明语法</title>
    <link href="https://dreamtohaha.github/2019/11/11/hexo-%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%85%B3%E4%BA%8E-markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95/"/>
    <id>https://dreamtohaha.github/2019/11/11/hexo-框架中关于-markdown-简明语法/</id>
    <published>2019-11-11T05:25:26.000Z</published>
    <updated>2019-11-12T07:24:24.265Z</updated>
    
    <content type="html"><![CDATA[<p>markdown的语法本质上都是可以用的，但是在hexo框架下还是有些节点需要进行注意。此篇文章主要就是用来介绍hexo框架编写markdown的语法节点，同时也将markdown的基本用法进行介绍  </p><h1 id="一级标题-关于段落"><a href="#一级标题-关于段落" class="headerlink" title="一级标题-关于段落"></a>一级标题-关于段落</h1><p>这是一个段落，直接在一行的最后加上两个空格，并且需要将下一个段落进行换行<br>另外一种方式就是在两个段落中间加上空行即可</p><h2 id="二级标题-关于字体"><a href="#二级标题-关于字体" class="headerlink" title="二级标题-关于字体"></a>二级标题-关于字体</h2><p><em>斜体文本，只需要在开头和结尾加上星号即可</em><br><strong>粗体文本，需要在开头和结尾加上双星号即可</strong><br><strong><em>粗斜体文本，需要在开头和结尾加上三星号即可</em></strong>  </p><p><strong>分隔线</strong>只需要使用***进行单独一行即可</p><hr><p><strong>删除线</strong>需要使用在开头和结尾使用两个波浪线即可<br><del>这是一个删除线</del><br><strong>下划线</strong>需要使用的符号进行标记<br><u>这是下划线的标记</u>  </p><p><strong>角标标注</strong>需要在需要加标注的地方使用[^RUNOOB]进行标注<br>添加标注[^RUNOOB]<br>[^RUNOOB]: 菜鸟教程 – 根据菜鸟教程进行编写脚注！！！</p><h3 id="三级标题–关于列表"><a href="#三级标题–关于列表" class="headerlink" title="三级标题–关于列表"></a>三级标题–关于列表</h3><ul><li>第一项星号后面需要空格</li><li>第二项星号后面需要空格</li><li>第三项星号后面需要空格</li></ul><ol><li>第一项也需要空格    </li><li>第二项也需要空格    </li><li>第三项也需要空格    </li></ol><ul><li>第一项    <ol><li>项目</li><li>项目</li><li>项目</li></ol></li></ul><ol><li>第二项    <ul><li>2.1项目</li><li>2.2项目</li><li>2.3项目<h4 id="四级标题–关于区块"><a href="#四级标题–关于区块" class="headerlink" title="四级标题–关于区块"></a>四级标题–关于区块</h4><blockquote><p>这是一个区块，但是我不知道有啥用</p><blockquote><p>二级区块</p><blockquote><p>三级区块</p></blockquote></blockquote></blockquote><h5 id="五级标题–关于代码"><a href="#五级标题–关于代码" class="headerlink" title="五级标题–关于代码"></a>五级标题–关于代码</h5>下面是一段代码，使用英文的反单引号进行实现<br><code>this is the code</code><br>下面是一个代码片段，使用英文的反单引号进行实现 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywinauto</span><br><span class="line"><span class="keyword">from</span> pyautogui <span class="keyword">import</span> application</span><br><span class="line">app = application.Application()</span><br><span class="line">app.start(cmd_line=<span class="string">""</span>)</span><br><span class="line">``` </span><br><span class="line"><span class="comment">###### 六级标题--关于链接</span></span><br><span class="line">这是一个链接使用英文中括号和圆括号进行实现  </span><br><span class="line">[this <span class="keyword">is</span> a link to this project](http://dreamtohaha.github.io/)  </span><br><span class="line"></span><br><span class="line"><span class="comment">###### 六级标题--关于图片</span></span><br><span class="line"></span><br><span class="line">![说明文字](https://dreamtohaha.oss-cn-hangzhou.aliyuncs.com/img/<span class="number">20191112143418.</span>png)</span><br><span class="line">&lt;img src=<span class="string">"https://dreamtohaha.oss-cn-hangzhou.aliyuncs.com/img/20191112143418.png"</span> width=<span class="string">"50%"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">###### 六级标题--关于表格</span></span><br><span class="line">|表头|表头|表头|</span><br><span class="line">|:---|---:|:---:|</span><br><span class="line">|一行一列|一行二列|一行三列|</span><br><span class="line">|Test二行一列Test|Test二行二列Test|Test二行三列Test|</span><br><span class="line">|三行一列|三行二列|三行三列|</span><br><span class="line"></span><br><span class="line"><span class="comment">###### 六级标题--关于markdown高级技巧</span></span><br></pre></td></tr></table></figure>\   反斜线<br>`   反引号</li></ul></li></ol><ul><li>星号<br>_   下划线<br>{}  花括号<br>[]  方括号<br>()  小括号<h1 id="井字号"><a href="#井字号" class="headerlink" title="井字号"></a>井字号</h1></li></ul><ul><li>加号</li></ul><ul><li>减号<br>.   英文句点<br>!   感叹号<pre><code>\*\*能够显示星号\*\*</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;markdown的语法本质上都是可以用的，但是在hexo框架下还是有些节点需要进行注意。此篇文章主要就是用来介绍hexo框架编写markdown的语法节点，同时也将markdown的基本用法进行介绍  &lt;/p&gt;
&lt;h1 id=&quot;一级标题-关于段落&quot;&gt;&lt;a href=&quot;#一级
      
    
    </summary>
    
    
      <category term="hexo教程" scheme="https://dreamtohaha.github/categories/hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo教程" scheme="https://dreamtohaha.github/tags/hexo%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
