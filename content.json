[{"title":"UI自动化分享","date":"2019-11-08T05:50:01.810Z","path":"2019/11/08/UI自动化分享/","text":"UI 自动化分享什么是自动化测试 在软件测试中，自动化测试指的是使用独立于待测软件的其他软件来自动执行测试、比较实际结果与预期并生成测试报告这一过程。在测试流程已经确定后，测试自动化可以自动执行的一些重复但必要测试工作。也可以完成手动测试几乎不可能完成的测试。对于持续交付和持续集成的开发方式而言，测试自动化是至关重要的。 随着软件系统规模的日益扩大，以及应用领域的不断拓展，对软件系统的测试也变得更加困难和复杂，传统的人工测试的局限性也越来越明显。自动化软件测试技术可以克服传统测试技术的许多问题。自动化测试所依据的是一套严密的测试法则和评估标准，具有完整的自动测试过程。因此，它可以避免测试人员惯性思维所导致的测试疏漏，也可减少由于手工测试中繁复的重复工作所导致的人为差错。 什么是 UI 自动化测试 基于图形用户交互界面测试（GUI Based Testing）。 基于用户界面（GUI）的测试使用能够产生图形用户界面操作（如出表点击、键盘输入等）的测试框架，模拟用户动作来以观察、验证程序是否正确的响应 UI 自动化优略的不完全举例由于它隶属于自动化测试，所以自动化测试的优略它都有 优势： 提高测试执行效率，节约时间成本； 解放人力去做更重要的工作； 可重复利用，建设对人的依赖； 提升客户满意度； 提升测试团队的整体水平； 可大幅度减少兼容性测试的工作量； 有些测试工作必须依靠自动化实现来完成； 劣势： 开发测试脚本需要花费较大的时间成本，拉长周期; 产品的快速迭代，自动化脚本也将不断迭代，时间成本很高; 不同的项目之间自动化脚本的复用度很低; 对短期型项目产品实现自动化价值不高; 自动化无法完全代替手工测试找到bug，实现100%覆盖; 自动化更多的适用于回归测试; 自动化开发过程对软件测试团队的技术有更高的要求; 除自动化的优略之外 UI 测试是常见的黑盒自动化测试场景，它最接近用户真实场景，也容易发现问题 UI 相对来说比较容易变化，容易导致测试用例的 fail，维护成本高 技术选型 &amp; 第三方库选用技术选型：人生苦短，我用 python 第三方库：pywinauto &amp; pyautogui UI 自动化的步骤 ⚠️强行总结，大佬轻喷⚠️ 找控件pywinauto推荐使用 UISpy（贴个图） pyautogui图像识别 模拟鼠标操作pywinauto 1234567891011pywinauto.mouse.click(button='left', coords=(0, 0)) #单击指定的坐标pywinauto.mouse.double_click(button='left', coords=(0, 0)) #双击指定的坐标pywinauto.mouse.move(coords=(0, 0)) #移动鼠标pywinauto.mouse.press(button='left', coords=(0, 0)) #按下鼠标按钮pywinauto.mouse.release(button='left', coords=(0, 0)) #释放鼠标按钮pywinauto.mouse.right_click(coords=(0, 0)) #右键单击指定的坐标pywinauto.mouse.scroll(coords=(0, 0), wheel_dist=1) #滚动鼠标滚轮pywinauto.mouse.wheel_click(coords=(0, 0)) #鼠标中键单击指定的坐标 直接对控件点击 点击坐标pyautogui 12345678910111213141516171819pyautogui.onScreen(0,0) #确定 x,y 在屏幕上pyautogui.size() #确定屏幕尺寸pyautogui.moveTo(100, 200) #绝对移动pyautogui.moveRel(100, 200) #相对移动pyautogui.dragTo(100, 200, button='left') #绝对移动pyautogui.dragRel(30, 0, 2, button='right') #相对移动#鼠标点击pyautogui.click(x=100, y=200)pyautogui.click(clicks=2) pyautogui.doubleClick(buttton='right')#鼠标按下和抬起pyautogui.mouseDown()pyautogui.mouseUp()#拖拽鼠标pyautogui.scroll(10, x=100, y=100) 模拟键盘操作pywinauto 通过调用 send_keys 方法自动键入键或单个键操作（即按住，释放）到活动窗口 可用的按键代码: {SCROLLLOCK}, {VK_SPACE}, {VK_LSHIFT}, {VK_PAUSE}, {VK_MODECHANGE}, {BACK}, {VK_HOME}, {F23}, {F22}, {F21}, {F20}, {VK_HANGEUL}, {VK_KANJI}, {VK_RIGHT}, {BS}, {HOME}, {VK_F4}, {VK_ACCEPT}, {VK_F18}, {VK_SNAPSHOT}, {VK_PA1}, {VK_NONAME}, {VK_LCONTROL}, {ZOOM}, {VK_ATTN}, {VK_F10}, {VK_F22}, {VK_F23}, {VK_F20}, {VK_F21}, {VK_SCROLL}, {TAB}, {VK_F11}, {VK_END}, {LEFT}, {VK_UP}, {NUMLOCK}, {VK_APPS}, {PGUP}, {VK_F8}, {VK_CONTROL}, {VK_LEFT}, {PRTSC}, {VK_NUMPAD4}, {CAPSLOCK}, {VK_CONVERT}, {VK_PROCESSKEY}, {ENTER}, {VK_SEPARATOR}, {VK_RWIN}, {VK_LMENU}, {VK_NEXT}, {F1}, {F2}, {F3}, {F4}, {F5}, {F6}, {F7}, {F8}, {F9}, {VK_ADD}, {VK_RCONTROL}, {VK_RETURN}, {BREAK}, {VK_NUMPAD9}, {VK_NUMPAD8}, {RWIN}, {VK_KANA}, {PGDN}, {VK_NUMPAD3}, {DEL}, {VK_NUMPAD1}, {VK_NUMPAD0}, {VK_NUMPAD7}, {VK_NUMPAD6}, {VK_NUMPAD5}, {DELETE}, {VK_PRIOR}, {VK_SUBTRACT}, {HELP}, {VK_PRINT}, {VK_BACK}, {CAP}, {VK_RBUTTON}, {VK_RSHIFT}, {VK_LWIN}, {DOWN}, {VK_HELP}, {VK_NONCONVERT}, {BACKSPACE}, {VK_SELECT}, {VK_TAB}, {VK_HANJA}, {VK_NUMPAD2}, {INSERT}, {VK_F9}, {VK_DECIMAL}, {VK_FINAL}, {VK_EXSEL}, {RMENU}, {VK_F3}, {VK_F2}, {VK_F1}, {VK_F7}, {VK_F6}, {VK_F5}, {VK_CRSEL}, {VK_SHIFT}, {VK_EREOF}, {VK_CANCEL}, {VK_DELETE}, {VK_HANGUL}, {VK_MBUTTON}, {VK_NUMLOCK}, {VK_CLEAR}, {END}, {VK_MENU}, {SPACE}, {BKSP}, {VK_INSERT}, {F18}, {F19}, {ESC}, {VK_MULTIPLY}, {F12}, {F13}, {F10}, {F11}, {F16}, {F17}, {F14}, {F15}, {F24}, {RIGHT}, {VK_F24}, {VK_CAPITAL}, {VK_LBUTTON}, {VK_OEM_CLEAR}, {VK_ESCAPE}, {UP}, {VK_DIVIDE}, {INS}, {VK_JUNJA}, {VK_F19}, {VK_EXECUTE}, {VK_PLAY}, {VK_RMENU}, {VK_F13}, {VK_F12}, {LWIN}, {VK_DOWN}, {VK_F17}, {VK_F16}, {VK_F15}, {VK_F14} 修饰符: &apos;+&apos;: {VK_SHIFT} &apos;^&apos;: {VK_CONTROL} &apos;%&apos;: {VK_MENU} a.k.a. Alt键1234567891011121314151617181920#使用修饰符:send_keys('^a^c') #全选（Ctrl + A）并复制到剪贴板（Ctrl + C）send_keys('+&#123;INS&#125;') #从剪贴板插入（Shift + Ins）send_keys('%&#123;F4&#125;') #使用Alt + F4关闭活动窗口 send_keys(&#123;ENTER 2&#125;) #表示按两次Enter键#如何按住或释放键盘上的按键:send_keys(\"&#123;VK_SHIFT down&#125;\" \"pywinauto\" \"&#123;VK_SHIFT up&#125;\") #输入 PYWINAUTOsend_keys(\"&#123;h down&#125;\" \"&#123;e down&#125;\" \"&#123;h up&#125;\" \"&#123;e up&#125;\" \"llo\") #输入 hello #使用花括号来转义修饰符并将保留符号键入为单个键:send_keys('&#123;^&#125;a&#123;^&#125;c&#123;%&#125;') #键入字符串 \"^a^c%\" (不会按下Ctrl键)send_keys('&#123;&#123;&#125;ENTER&#123;&#125;&#125;') #键入字符串“&#123;ENTER&#125;”而不按Enter键 pyautogui 1234567891011pyautogui.typewrite('Hello world!') #输入字符#按下键，抬起键和 press（可以传列表）yautogui.keyDown('shift')pyautogui.press('left')pyautogui.press('left')pyautogui.press('left') pyautogui.keyUp('shift') #组合热键pyautogui.hotkey('ctrl', 'shift', 'esc')","tags":[]},{"title":"Hello World","date":"2019-11-07T08:19:45.812Z","path":"2019/11/07/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]